name: Build and Release

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - "linkup-cli/Cargo.toml"

jobs:
  check_version:
    name: Check if Version Changed
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check Version
        id: check
        run: |
          # new_version=$(grep '^version = ' linkup-cli/Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          # old_version=$(git show HEAD^:linkup-cli/Cargo.toml | grep '^version = ' | sed -E 's/version = "(.*)"/\1/')
          # echo "New version: $new_version"
          # echo "Old version: $old_version"

          # if [ "$new_version" = "$old_version" ]; then
          #   echo "No version change detected."
          #   echo "version_changed=false" >> $GITHUB_OUTPUT
          # else
          #   echo "Version change detected."
          #   echo "version_changed=true" >> $GITHUB_OUTPUT
          # fi

          # echo "new_version=$new_version" >> $GITHUB_OUTPUT

          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "version=2.1.2" >> $GITHUB_OUTPUT

  build:
    name: Build Release Artifact
    needs: check_version
    if: ${{ needs.check_version.outputs.version_changed == 'true' }}
    runs-on: ${{ matrix.os }}
    outputs:
      artifact_id: ${{ steps.artifact-upload-step.outputs.artifact-id }}
      artifact_url: ${{ steps.artifact-upload-step.outputs.artifact-url }}
      artifact_digest: ${{ steps.artifact-upload-step.outputs.artifact-digest }}
    strategy:
      matrix:
        include:
          # - os: ubuntu-latest
          #   display_os: linux
          #   rust_target: x86_64-unknown-linux-gnu
          #   linker: ""
          #   arch: x86
          #   goarch: amd64
          # - os: ubuntu-latest
          #   display_os: linux
          #   rust_target: aarch64-unknown-linux-gnu
          #   linker: gcc-aarch64-linux-gnu
          #   arch: aarch64
          #   goarch: arm6
          - os: macos-latest
            display_os: darwin
            rust_target: x86_64-apple-darwin
            linker: ""
            arch: x86
            goarch: amd64
          - os: macos-latest
            display_os: darwin
            rust_target: aarch64-apple-darwin
            linker: ""
            arch: aarch64
            goarch: arm64
    steps:
      # - name: Checkout Repository
      #   uses: actions/checkout@v4

      # - name: Install Linker (if needed)
      #   if: ${{ matrix.linker != '' }}
      #   run: |
      #     cargo install cross
      #     sudo apt update
      #     sudo apt install -y ${{ matrix.linker }}
      #     cat .cargo/config.github >> .cargo/config

      # - name: Setup Rust
      #   run: |
      #     rustup install stable
      #     rustup target add ${{ matrix.rust_target }}
      #     rustup show

      # - name: Build Linkup Binary
      #   run: |
      #     cargo build --release --manifest-path linkup-cli/Cargo.toml --target ${{ matrix.rust_target }}

      # - name: Setup Go
      #   uses: actions/setup-go@v4
      #   with:
      #     go-version: "1.23"

      # - name: Install xcaddy
      #   run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      # - name: Build Caddy Binary
      #   run: |
      #     export GOOS=${{ matrix.display_os }}
      #     export GOARCH=${{ matrix.goarch }}
      #     xcaddy build --output caddy --with github.com/mentimeter/caddy-dns-linkup --with github.com/mentimeter/caddy-storage-linkup

      # - name: Move binaries to upload
      #   run: |
      #     mkdir release-package

      #     cp target/${{ matrix.rust_target }}/release/linkup release-package/
      #     cp caddy release-package/

      - name: "[TEST] Create mock files"
        run: |
          mkdir release-package
          touch release-package/linkup
          touch release-package/caddy

      - name: Upload Tarball Artifact
        id: artifact-upload-step
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ needs.check_version.outputs.version }}-${{ matrix.display_os }}-${{ matrix.arch }}
          path: |
            release-package/linkup
            release-package/caddy

      - name: Output Artifact information
        run: |
          echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'
          echo 'Artifact URL is ${{ steps.artifact-upload-step.outputs.artifact-url }}'
          echo 'Artifact Digest is ${{ steps.artifact-upload-step.outputs.artifact-digest }}'

  release:
    name: Create Release
    needs: [check_version, build]
    if: ${{ needs.check_version.outputs.version_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # - name: Mock Release
      #   run: |
      #     echo "Creating release for version ${{ needs.check_version.outputs.version }}"
      #     echo "Release artifact:"
      #     echo "  - ID:     ${{ needs.build.outputs.artifact_id }}"
      #     echo "  - URL:    ${{ needs.build.outputs.artifact_url }}"
      #     echo "  - Digest: ${{ needs.build.outputs.artifact_digest }}"

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: All files in artifacts
        run: ls -lah artifacts

      # - name: Create GitHub Release
      #   id: create_release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ needs.check_version.outputs.version }}
      #     files: |
      #       artifacts/*
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
