name: Create Release

on:
  push:
    branches:
      - main
    paths:
      - "linkup-cli/Cargo.toml"

jobs:
  check_version:
    name: Check if Version Changed
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check Version
        id: check
        run: |
          new_version=$(grep '^version = ' linkup-cli/Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          old_version=$(git show HEAD^:linkup-cli/Cargo.toml | grep '^version = ' | sed -E 's/version = "(.*)"/\1/')

          echo "New version: $new_version"
          echo "Old version: $old_version"

          if [ "$new_version" = "$old_version" ]; then
            echo "No version change detected."
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "new_version=''" >> $GITHUB_OUTPUT
          else
            echo "Version change detected."
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$new_version" >> $GITHUB_OUTPUT
          fi

  build:
    needs: [check_version]
    name: Build
    runs-on: ${{matrix.os}}
    if: ${{ needs.check_version.outputs.version_changed == 'true' }}
    strategy:
      matrix:
        include:
          - build: linux
            os: depot-ubuntu-22.04-8
            target: x86_64-unknown-linux-gnu
          - build: aarch64
            os: depot-ubuntu-22.04-arm-8
            target: aarch64-unknown-linux-gnu
            linker: gcc-aarch64-linux-gnu
          - build: macos
            os: depot-macos-14
            target: x86_64-apple-darwin
          - build: macos-aarch64
            os: depot-macos-14
            target: aarch64-apple-darwin
    outputs:
      release_version: ${{ steps.get_version.outputs.release_version }}
      mac_x86_sha: ${{ steps.mac_x86_sha.outputs.mac_x86_sha }}
      mac_arm_sha: ${{ steps.mac_arm_sha.outputs.mac_arm_sha }}
      linux_x86_sha: ${{ steps.linux_x86_sha.outputs.linux_x86_sha }}
      linux_arm_sha: ${{ steps.linux_arm_sha.outputs.linux_arm_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Rust
        run: |
          rustup install stable
          rustup target add ${{ matrix.target }}
          rustup show

      - name: Build
        run: cargo build --release --manifest-path linkup-cli/Cargo.toml  --target ${{ matrix.target }}

      - name: Get Version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' linkup-cli/Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "release_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Package Artifacts
        run: |
          src=$(pwd)
          stage=
          case $RUNNER_OS in
              Linux)
                  stage=$(mktemp -d)
                  ;;
              macOS)
                  stage=$(mktemp -d -t tmp)
                  ;;
          esac

          cp target/${{ matrix.target }}/release/linkup $stage/
          cd $stage

          # Use the version from the environment variable
          RELEASE_VERSION=${{ env.RELEASE_VERSION }}
          ASSET_NAME="linkup-$RELEASE_VERSION-${{ matrix.target }}.tar.gz"
          ASSET_PATH="$src/$ASSET_NAME"
          CHECKSUM_PATH="$ASSET_PATH.sha256"

          echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV
          echo "CHECKSUM_PATH=$CHECKSUM_PATH" >> $GITHUB_ENV

          tar czf $ASSET_PATH *

          cd $src

          case $RUNNER_OS in
              Linux)
                  sha256sum $ASSET_NAME > $CHECKSUM_PATH
                  ;;
              macOS)
                  shasum -a 256 $ASSET_NAME > $CHECKSUM_PATH
                  ;;
          esac

      - name: Set SHA Output Mac x86
        id: mac_x86_sha
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          echo "$(cat ${{ env.CHECKSUM_PATH }})"
          echo "mac_x86_sha=$(cat ${{ env.CHECKSUM_PATH }})" >> $GITHUB_OUTPUT

      - name: Set SHA Outputs Mac ARM
        id: mac_arm_sha
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          echo "$(cat ${{ env.CHECKSUM_PATH }})"
          echo "mac_arm_sha=$(cat ${{ env.CHECKSUM_PATH }})" >> $GITHUB_OUTPUT

      - name: Set SHA Output Linux x86
        id: linux_x86_sha
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          echo "$(cat ${{ env.CHECKSUM_PATH }})"
          echo "linux_x86_sha=$(cat ${{ env.CHECKSUM_PATH }})" >> $GITHUB_OUTPUT

      - name: Set SHA Outputs Linux ARM
        id: linux_arm_sha
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "$(cat ${{ env.CHECKSUM_PATH }})"
          echo "linux_arm_sha=$(cat ${{ env.CHECKSUM_PATH }})" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          files: |
            ${{ env.ASSET_PATH }}
            ${{ env.CHECKSUM_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_homebrew_formula:
    needs: [build, check_version]
    runs-on: ubuntu-latest
    if: ${{ needs.check_version.outputs.version_changed == 'true' }}
    steps:
      - name: Checkout Homebrew Tap Repository
        run: git clone https://github.com/mentimeter/homebrew-mentimeter.git

      - name: Update Homebrew Formula
        run: |
          RELEASE_VERSION="${{ needs.build.outputs.release_version }}"
          FORMULA_PATH="homebrew-mentimeter/linkup.rb"

          if [ -z "$RELEASE_VERSION" ]; then
            printf '%s\n' 'RELEASE_VERSION variable is empty'
            exit 1
          fi

          MAC_ARM_SHA=$(echo "${{ needs.build.outputs.mac_arm_sha }}" | awk '{print $1}')
          MAC_X86_SHA=$(echo "${{ needs.build.outputs.mac_x86_sha }}" | awk '{print $1}')
          LINUX_ARM_SHA=$(echo "${{ needs.build.outputs.linux_arm_sha }}" | awk '{print $1}')
          LINUX_X86_SHA=$(echo "${{ needs.build.outputs.linux_x86_sha }}" | awk '{print $1}')

          # Update the SHA values
          sed -i "s|MAC_ARM_SHA = \".*\"|MAC_ARM_SHA = \"$MAC_ARM_SHA\"|" "$FORMULA_PATH"
          sed -i "s|MAC_X86_SHA = \".*\"|MAC_X86_SHA = \"$MAC_X86_SHA\"|" "$FORMULA_PATH"
          sed -i "s|LINUX_ARM_SHA = \".*\"|LINUX_ARM_SHA = \"$LINUX_ARM_SHA\"|" "$FORMULA_PATH"
          sed -i "s|LINUX_X86_SHA = \".*\"|LINUX_X86_SHA = \"$LINUX_X86_SHA\"|" "$FORMULA_PATH"

          # Update the URLs with the new release version
          sed -i "s|https://github.com/mentimeter/linkup/releases/download/[0-9.]*/linkup-[0-9.]*-aarch64-apple-darwin.tar.gz|https://github.com/mentimeter/linkup/releases/download/$RELEASE_VERSION/linkup-$RELEASE_VERSION-aarch64-apple-darwin.tar.gz|" "$FORMULA_PATH"
          sed -i "s|https://github.com/mentimeter/linkup/releases/download/[0-9.]*/linkup-[0-9.]*-x86_64-apple-darwin.tar.gz|https://github.com/mentimeter/linkup/releases/download/$RELEASE_VERSION/linkup-$RELEASE_VERSION-x86_64-apple-darwin.tar.gz|" "$FORMULA_PATH"
          sed -i "s|https://github.com/mentimeter/linkup/releases/download/[0-9.]*/linkup-[0-9.]*-aarch64-unknown-linux-gnu.tar.gz|https://github.com/mentimeter/linkup/releases/download/$RELEASE_VERSION/linkup-$RELEASE_VERSION-aarch64-unknown-linux-gnu.tar.gz|" "$FORMULA_PATH"
          sed -i "s|https://github.com/mentimeter/linkup/releases/download/[0-9.]*/linkup-[0-9.]*-x86_64-unknown-linux-gnu.tar.gz|https://github.com/mentimeter/linkup/releases/download/$RELEASE_VERSION/linkup-$RELEASE_VERSION-x86_64-unknown-linux-gnu.tar.gz|" "$FORMULA_PATH"

          cd homebrew-mentimeter

          git remote set-url origin https://x-access-token:${COMMIT_TOKEN}@github.com/mentimeter/homebrew-mentimeter.git
          git config --global user.name "mentibot"
          git config --global user.email "122382604+mentibot@users.noreply.github.com"

          git add linkup.rb
          git commit -m "Update Linkup formula to $RELEASE_VERSION"

          git push origin HEAD:main
        env:
          COMMIT_TOKEN: ${{ secrets.COMMIT_TOKEN }}
