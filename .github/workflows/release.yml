name: Build and Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "linkup-cli/Cargo.toml"

jobs:
  check_version:
    name: Check if Version Changed
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check Version
        id: check
        run: |
          new_version=$(grep '^version = ' linkup-cli/Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          old_version=$(git show HEAD^:linkup-cli/Cargo.toml | grep '^version = ' | sed -E 's/version = "(.*)"/\1/')
          echo "New version: $new_version"
          echo "Old version: $old_version"

          if [ "$new_version" = "$old_version" ]; then
            echo "No version change detected."
            echo "version_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Version change detected."
            echo "version_changed=true" >> $GITHUB_OUTPUT
          fi

          echo "new_version=$new_version" >> $GITHUB_OUTPUT

  build:
    name: Build Release Artifact
    needs: check_version
    if: ${{ needs.check_version.outputs.version_changed == 'true' }}
    runs-on: ${{ matrix.os }}
    outputs:
      artifact_id: ${{ steps.artifact-upload-step.outputs.artifact-id }}
      artifact_url: ${{ steps.artifact-upload-step.outputs.artifact-url }}
      artifact_digest: ${{ steps.artifact-upload-step.outputs.artifact-digest }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            display_os: linux
            rust_target: x86_64-unknown-linux-gnu
            linker: ""
            arch: x86_64
            goarch: amd64
          - os: ubuntu-latest
            display_os: linux
            rust_target: aarch64-unknown-linux-gnu
            linker: gcc-aarch64-linux-gnu
            arch: aarch64
            goarch: arm6
          - os: macos-latest
            display_os: darwin
            rust_target: x86_64-apple-darwin
            linker: ""
            arch: x86_64
            goarch: amd64
          - os: macos-latest
            display_os: darwin
            rust_target: aarch64-apple-darwin
            linker: ""
            arch: aarch64
            goarch: arm64
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Linker (if needed)
        if: ${{ matrix.linker != '' }}
        run: |
          cargo install cross
          sudo apt update
          sudo apt install -y ${{ matrix.linker }}
          cat .cargo/config.github >> .cargo/config

      - name: Setup Rust
        run: |
          rustup install stable
          rustup target add ${{ matrix.rust_target }}
          rustup show

      - name: Build Linkup Binary
        run: |
          cargo build --release --manifest-path linkup-cli/Cargo.toml --target ${{ matrix.rust_target }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Install xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      - name: Build Caddy Binary
        run: |
          export GOOS=${{ matrix.display_os }}
          export GOARCH=${{ matrix.goarch }}
          xcaddy build --output caddy --with github.com/mentimeter/caddy-dns-linkup --with github.com/mentimeter/caddy-storage-linkup

      - name: Move binaries to upload
        run: |
          mkdir release-package

          cp target/${{ matrix.rust_target }}/release/linkup release-package/
          cp caddy release-package/

      - name: Package Release Tarball
        id: package-release
        run: |
          TARBALL_NAME="release-${{ needs.check_version.outputs.version }}-${{ matrix.display_os }}-${{ matrix.arch }}.tar.gz"
          tar -czvf $TARBALL_NAME -C release-package .

          echo "Created tarball: $TARBALL_NAME"
          echo "tarball_name=$TARBALL_NAME" >> $GITHUB_OUTPUT

      - name: Create SHA file
        id: create-sha
        run: |
          ASSET_NAME="${{ steps.package-release.outputs.tarball_name }}"
          CHECKSUM_PATH="${ASSET_NAME}.sha256"

          case $RUNNER_OS in
            Linux)
                sha256sum $ASSET_NAME > $CHECKSUM_PATH
                ;;
            macOS)
                shasum -a 256 $ASSET_NAME > $CHECKSUM_PATH
                ;;
          esac

          echo "Created checksum: $CHECKSUM_PATH"
          echo "checksum_path=$CHECKSUM_PATH" >> $GITHUB_OUTPUT

      - name: Upload Tarball Artifact
        id: artifact-upload-step
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.check_version.outputs.version }}-${{ matrix.display_os }}-${{ matrix.arch }}
          path: |
            ${{ steps.package-release.outputs.tarball_name }}
            ${{ steps.create-sha.outputs.checksum_path }}

      - name: Output Artifact information
        run: |
          echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'
          echo 'Artifact URL is ${{ steps.artifact-upload-step.outputs.artifact-url }}'
          echo 'Artifact Digest is ${{ steps.artifact-upload-step.outputs.artifact-digest }}'

  release:
    name: Create Release
    needs: [check_version, build]
    if: ${{ needs.check_version.outputs.version_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: "All files in artifacts"
        run: ls -lah artifacts

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check_version.outputs.version }}
          files: |
            artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
